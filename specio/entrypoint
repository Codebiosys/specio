#! /usr/bin/env python3

from contextlib import contextmanager
import os
import os.path

from forrest import run
from forrest.celery import app


PIDFILE = 'gump.pid'
RUN_MODE = os.environ['RUN_MODE'].lower()
WATCH_MODE, WORKER_MODE = (
  'watch',
  'worker',
)


@contextmanager
def lock():
  """ A context manager for locking a process to a single running instance.
  This context manager writes to a pidfile and if, in doing so, sees a previously
  existing one, will terminate the program.
  """
  if os.path.exists(PIDFILE):
    raise Exception('There\'s already a running instance.\nTerminating...')

  with open(PIDFILE, 'w') as f:
    f.write('.')

  try:
    yield None
  finally:
    os.remove(PIDFILE)


if __name__ == '__main__':
  with lock():
    if RUN_MODE == WORKER_MODE:
      print('Starting Worker')
      app.worker_main()
    elif RUN_MODE == WATCH_MODE:
      print('Initializing File Watching')
      run.main()
    else:
      print('Skipping initialization. Pipelines must be run manually.')
